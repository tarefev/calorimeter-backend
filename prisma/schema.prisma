// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique @db.VarChar(320)
  passwordHash     String
  telegramId       String?         @unique
  telegramUsername String?         @db.VarChar(32)
  telegramLinkedAt DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  sessions         Session[]
  dayRecords       DayRecord[]
  profile          UserProfile?
  authAccounts     AuthAccount[]
  authLinkTokens   AuthLinkToken[]
  failedLoginCount Int      @default(0)
  failedLoginLockedUntil DateTime?

  @@index([email])
}

model Session {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel    String    @db.VarChar(16)
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  lastSeenAt DateTime?
  ip         String?   @db.VarChar(45)
  userAgent  String?
  revokedAt  DateTime?

  @@index([userId, expiresAt])
}

model UserProfile {
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  heightCm       Int?
  targetWeightKg Decimal? @db.Decimal(5, 2)
  age            Int?
  sex            String?  @db.VarChar(1)
  activityLevel  String?  @db.VarChar(16)
  tz             String?  @db.VarChar(64)
  updatedAt      DateTime @updatedAt
}

model AuthAccount {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     String   @db.VarChar(32) // e.g. 'local', 'telegram'
  providerId   String   @db.VarChar(320) // email for local, telegramId for telegram
  passwordHash String? // only for local provider
  createdAt    DateTime @default(now())

  @@unique([provider, providerId])
  @@index([userId])
}

model AuthLinkToken {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token      String    @unique @db.VarChar(32)
  provider   String    @db.VarChar(32) // e.g. 'telegram'
  providerId String?   @db.VarChar(64) // telegram user id once confirmed
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime  @default(now())

  @@index([userId, expiresAt])
}

// DayRecord and related models: store daily user entries and items
model DayRecord {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime

  // optional aggregated/entered metrics for the day
  metric    Metric?

  // child items
  water     Water[]
  food      Food[]
  activity  Activity[]
  exercise  Exercise[]
  sleep     Sleep?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
}

model Metric {
  id            String   @id @default(cuid())
  dayRecordId   String   @unique
  dayRecord     DayRecord @relation(fields: [dayRecordId], references: [id], onDelete: Cascade)

  // user-entered or device-measured metrics
  weightKg      Decimal? @db.Decimal(6,2)
  bodyFatPct    Decimal? @db.Decimal(5,2)
  caloriesIn    Int?
  caloriesOut   Int?
  proteinG      Int?
  carbsG        Int?
  fatG          Int?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Water {
  id          String   @id @default(cuid())
  dayRecordId String
  dayRecord   DayRecord @relation(fields: [dayRecordId], references: [id], onDelete: Cascade)

  amountMl    Int
  notedAt     DateTime @default(now())
  timeLocal   String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([dayRecordId])
}

model Food {
  id          String   @id @default(cuid())
  dayRecordId String
  dayRecord   DayRecord @relation(fields: [dayRecordId], references: [id], onDelete: Cascade)

  name        String   @db.VarChar(255)
  calories    Int
  proteinG    Int?
  carbsG      Int?
  fatG        Int?
  kcalPer100G Decimal? @db.Decimal(8,2)
  proteinPer100G Decimal? @db.Decimal(8,2)
  fatPer100G Decimal? @db.Decimal(8,2)
  carbsPer100G Decimal? @db.Decimal(8,2)
  weightG     Int?
  notedAt     DateTime? 
  timeLocal   String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([dayRecordId])
}

model Activity {
  id          String   @id @default(cuid())
  dayRecordId String
  dayRecord   DayRecord @relation(fields: [dayRecordId], references: [id], onDelete: Cascade)

  type        String   @db.VarChar(64) // e.g. 'walking', 'running'
  durationMin Int?
  calories    Int?
  intensity   String?  @db.VarChar(16)
  notedAt     DateTime? 
  timeLocal   String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([dayRecordId])
}

model Exercise {
  id          String   @id @default(cuid())
  dayRecordId String
  dayRecord   DayRecord @relation(fields: [dayRecordId], references: [id], onDelete: Cascade)

  name        String   @db.VarChar(128)
  sets        Int?
  reps        Int?
  weightKg    Decimal? @db.Decimal(6,2)
  durationMin Int?
  calories    Int?
  notedAt     DateTime?
  timeLocal   String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([dayRecordId])
}

model Sleep {
  id          String   @id @default(cuid())
  dayRecordId String   @unique
  dayRecord   DayRecord @relation(fields: [dayRecordId], references: [id], onDelete: Cascade)

  startAt     DateTime
  endAt       DateTime
  startLocal  String?
  endLocal    String?
  quality     Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
